import os
from dotenv import load_dotenv
import logging
import random
import json
from telegram import (
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Update,
)
from telegram.ext import (
    ApplicationBuilder,
    CallbackContext,
    CommandHandler,
    ConversationHandler,
    CallbackQueryHandler,
)
load_dotenv()
api_key = os.getenv("API_KEY")
# Logging Setup
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot States
ASKING, FINISHED = range(2)

# Load Questions
QUESTIONS_FILE = "questions.json"
with open(QUESTIONS_FILE, "r", encoding="utf-8") as file:
    QUESTION_POOL = json.load(file)

# Images Folder
IMAGES_FOLDER = "images"

# Start Command
async def start(update: Update, context: CallbackContext) -> int:
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    logger.info(f"User {user_name} (ID: {user_id}) started the bot.")

    context.user_data[user_id] = {
        "questions": random.sample(QUESTION_POOL, 10),
        "answers": [],
        "yes_count": 0,
        "current_question": 0,
    }

    keyboard = [[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "<b>–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —É–ø–æ—Ä–æ–≤—Å—è üåøüòµ‚Äçüí´.\n–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç'</b>!",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )
    logger.info("Sent '–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç' button.")
    return ASKING

# Handle Start Quiz Button
async def handle_start_quiz(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    await query.answer()
    logger.info(f"User {user_name} (ID: {user_id}) clicked '–ü–æ—á–∞—Ç–∏'. Starting quiz.")
    await ask_question(update, context)
    return ASKING

# Ask Question
async def ask_question(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    user_data = context.user_data.get(user_id)

    if not user_data:
        logger.warning(f"User {user_name} (ID: {user_id}) has no active session.")
        await query.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É /start.")
        return ConversationHandler.END

    current_question_index = user_data["current_question"]
    if current_question_index < len(user_data["questions"]):
        question = user_data["questions"][current_question_index]
        logger.info(f"User {user_name} (ID: {user_id}) is being asked: {question}")
        keyboard = [
            [InlineKeyboardButton("–¢–∞–∫", callback_data="yes"), InlineKeyboardButton("–ù—ñ", callback_data="no")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.edit_text(
            f"<b>{question}</b>",
            reply_markup=reply_markup,
            parse_mode="HTML",
        )
    else:
        logger.info(f"User {user_name} (ID: {user_id}) has answered all questions.")
        await finish_quiz(update, context)

# Handle Answer
async def handle_answer(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    user_name = query.from_user.full_name
    user_data = context.user_data.get(user_id)

    if not user_data or "current_question" not in user_data:
        logger.warning(f"User {user_name} (ID: {user_id}) has no active session.")
        await query.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É /start.")
        return ConversationHandler.END

    if user_data["current_question"] >= len(user_data["questions"]):
        logger.error(
            f"User {user_name} (ID: {user_id}) encountered an out-of-bounds question index. "
            f"Index: {user_data['current_question']}, Questions Length: {len(user_data['questions'])}"
        )
        return await restart(update, context)

    answer = "–¢–∞–∫" if query.data == "yes" else "–ù—ñ"
    user_data["answers"].append(
        {"question": user_data["questions"][user_data["current_question"]], "answer": answer}
    )
    if query.data == "yes":
        user_data["yes_count"] += 1

    logger.info(f"User {user_name} (ID: {user_id}) answered: {answer}")
    user_data["current_question"] += 1

    if user_data["current_question"] < len(user_data["questions"]):
        await ask_question(update, context)
    else:
        logger.info(f"User {user_name} (ID: {user_id}) finished answering questions.")
        await finish_quiz(update, context)
    return ASKING

# Finish Quiz
async def finish_quiz(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    user_data = context.user_data.get(user_id)

    if not user_data:
        logger.warning(f"User {user_name} (ID: {user_id}) has no active session.")
        await query.message.reply_text("–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É /start.")
        return ConversationHandler.END

    yes_count = user_data["yes_count"]

    if yes_count <= 3:
        summary = random.choice([
        "üü¢ <b>–õ–∞–π—Ç-–Ω–∞—Ä–∫–æ—à–∞</b>: –¢–∏ —â–µ –Ω–µ —Å–∏–ª—å–Ω–æ —É–ø–æ—Ä–æ–≤—Å—è, –∞–ª–µ —Ç–≤–æ—ó –æ—á—ñ –≤–∂–µ —Ç—Ä–æ—Ö–∏ —á–µ—Ä–≤–æ–Ω—ñ!",
        "üü¢ <b>–ú–∞–π–∂–µ –Ω–æ—Ä–º</b>: –¢–∏ —Ç–æ—á–Ω–æ –∑–Ω–∞—î—à –º–µ–∂—É, –∞–ª–µ –∫—Ä–∞—â–µ –Ω–µ —Ä–∏–∑–∏–∫—É–π!",
        "üü¢ <b>–ö–µ–∂—É–∞–ª</b>: –î–∏–º –Ω–∞–≤–∫–æ–ª–æ —Ç–µ–±–µ –ª–∏—à–µ –∑—Ä—ñ–¥–∫–∞, –Ω–µ —á–∞—Å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–∏ –Ω–∞ –Ω–æ–≤–∏–π —Ä—ñ–≤–µ–Ω—å!",
        "üü¢ <b>–ù–∞ –º–µ–∂—ñ</b>: –¢–∏ —â–µ –Ω–µ —Ç–æ—Ä—á, –∞–ª–µ —Ç–æ—á–Ω–æ –∑–Ω–∞—î—à, —è–∫ —Ü–µ –≤–∏–≥–ª—è–¥–∞—î.",
        "üü¢ <b>–ö–æ–Ω—Ç—Ä–æ–ª—å–æ–≤–∞–Ω–∏–π</b>: –¢–∏ –±—ñ–ª—å—à–µ —Å—Ö–æ–∂–∏–π –Ω–∞ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—á–∞, –Ω—ñ–∂ –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—å–æ–≥–æ —É–ø–æ—Ä–æ—Ç–æ–≥–æ."
    ])
    elif 4 <= yes_count <= 6:
        summary = random.choice([
        "üü° <b>–°–µ—Ä–µ–¥–Ω—ñ–π —Ñ—ñ—Ç</b>: –£ —Ç–≤–æ—ó–π –∫–æ–º–ø–∞–Ω—ñ—ó —Ç–µ–±–µ –≤–∂–µ –Ω–∞–∑–∏–≤–∞—é—Ç—å ¬´–¥–∏–º–æ–≤–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä¬ª!",
        "üü° <b>–î–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π</b>: –£ —Ç–µ–±–µ —î —Å—Ç–∏–ª—å, —ñ —Ü–µ –∑–Ω–∞—é—Ç—å —É—Å—ñ, —Ö—Ç–æ –ø–æ—Ä—É—á.",
        "üü° <b>–í–∂–µ –Ω–∞—Ä–∫—î—Ç</b>: –¢–≤–æ—ó –¥—Ä—É–∑—ñ —Å–∫–∏–¥–∞—é—Ç—å—Å—è —Ç–æ–±—ñ –Ω–∞ –Ω–æ–≤—É –ø–∞—á–∫—É, –±–æ —Ç–∏ –Ω–µ –∑—É–ø–∏–Ω—è—î—à—Å—è.",
        "üü° <b>–ë—É–≤–∞–ª–∏–π</b>: –î–∏–º —ñ —Ñ–∞–Ω–∏ –∑–∞–≤–∂–¥–∏ –ø–æ—Ä—É—á, –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ —Ç–∏ —Ü—å–æ–≥–æ –Ω–µ –ø–æ–º—ñ—á–∞—î—à.",
        "üü° <b>–ü–æ—á–∏–Ω–∞—î—Ç—å—Å—è</b>: –í—Å—ñ –∑–Ω–∞—é—Ç—å, —â–æ —Ç–∏ –ª—é–±–∏—à —Ç–µ–º—É, —ñ —Ü–µ –≤–∂–µ —Å–µ—Ä–π–æ–∑–Ω–æ."
    ])
    else:
        summary = random.choice([
        "üî¥ <b>–¢–û–ü –¢–û–†–ß!</b>: –¢–∏ ‚Äî –ª–µ–≥–µ–Ω–¥–∞, –¥–∏–º–æ–≤–∏–π –±–æ–≥, —Ç–∞–∫–∏–π, —è–∫ —Ç–∏, –∑–∞–ø–∞–ª—é—î –≤—Å—ñ—Ö –Ω–∞–≤–∫–æ–ª–æ!",
        "üî¥ <b>–ú–∞–π—Å—Ç–µ—Ä —É–ø–æ—Ä–æ—Ç–∏—Ö</b>: –£—Å—ñ —á–µ–∫–∞—é—Ç—å –Ω–∞ —Ç–≤–æ—ó –Ω–æ–≤—ñ —Ä–µ–∫–æ—Ä–¥–∏.",
        "üî¥ <b>–ë–æ–∂–µ–≤—ñ–ª—å–Ω–∏–π</b>: –£ —Ç–≤–æ—î–º—É –æ—Ç–æ—á–µ–Ω–Ω—ñ –Ω–µ–º–∞—î —Ç–∏—Ö, —Ö—Ç–æ –± –º—ñ–≥ –ø–µ—Ä–µ–ø–ª—é–Ω—É—Ç–∏ —Ç–µ–±–µ.",
        "üî¥ <b>–ù–∞—Ä–∫–æ–õ–æ—Ä–¥</b>: –¢–∏ —Å—Ç–∞–≤ —ñ–∫–æ–Ω–æ—é –≤—Å—ñ—Ö —Ç–æ—Ä—á–∫—ñ–≤! –í—Å—ñ –∑–Ω–∞—é—Ç—å, —Ö—Ç–æ —Ç—É—Ç –≥–æ–ª–æ–≤–Ω–∏–π.",
        "üî¥ <b>–î–∏–º–æ–≤–∏–π –∫–æ—Ä–æ–ª—å</b>: –ö–æ–ª–∏ —Ç–∏ –ø–æ—Ä—É—á, –ø–æ–≤—ñ—Ç—Ä—è —Å—Ç–∞—î –≤–∞–∂—á–∏–º, –∞ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –≥—É—Å—Ç—ñ—à–æ—é."
    ])


    image_path = f"{IMAGES_FOLDER}/420_{random.randint(1, 20)}.jpg"
    logger.info(f"User {user_name} (ID: {user_id}) will receive image: {image_path}")
    try:
        with open(image_path, "rb") as img:
            await query.message.reply_photo(photo=img, caption=summary, parse_mode="HTML")
    except FileNotFoundError:
        logger.error(f"Image not found: {image_path}")
        await query.message.reply_text(summary + "\n\n–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è üò¢", parse_mode="HTML")

    keyboard = [[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text("<b>–•–æ—á–µ—Ç–µ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ —â–µ —Ä–∞–∑?</b>", reply_markup=reply_markup, parse_mode="HTML")
    return FINISHED

# Restart Quiz with Full Reset
async def restart(update: Update, context: CallbackContext) -> int:
    query = update.callback_query
    user_id = query.from_user.id
    user_name = query.from_user.full_name
    await query.answer()

    logger.info(f"User {user_name} (ID: {user_id}) clicked '–ü–æ—á–∞—Ç–∏ –∑–∞–Ω–æ–≤–æ'. Restarting the quiz.")

    context.user_data[user_id] = {
        "questions": random.sample(QUESTION_POOL, 10),
        "answers": [],
        "yes_count": 0,
        "current_question": 0,
    }

    keyboard = [[InlineKeyboardButton("–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_quiz")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        "<b>–ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –Ω–∞—Å–∫—ñ–ª—å–∫–∏ —Ç–∏ —É–ø–æ—Ä–æ–≤—Å—è</b> üåøüòµ‚Äçüí´.\n <b>–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å '–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç'</b>!",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )
    logger.info("Sent '–ü–æ—á–∞—Ç–∏ —Ç–µ—Å—Ç' button for restart.")
    return ASKING

# Global error handler
async def error_handler(update: object, context: CallbackContext):
    logger.error(msg="Exception while handling an update:", exc_info=context.error)

# Main Code
if __name__ == "__main__":
    TOKEN = api_key
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASKING: [CallbackQueryHandler(handle_answer)],
            FINISHED: [CallbackQueryHandler(restart, pattern="^restart$")],
        },
        fallbacks=[CommandHandler("start", start)],
    )

    application.add_handler(CallbackQueryHandler(handle_start_quiz, pattern="^start_quiz$"))
    application.add_handler(conv_handler)

    logger.info("Bot is running...")
    application.run_polling()
